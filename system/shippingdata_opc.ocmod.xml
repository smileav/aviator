<?xml version="1.0" encoding="utf-8"?>
	<modification>
		<name>Shipping Data novaposhta for Opc Checkout</name>
		<code>SD Opc novaposhta Checkout</code>
		<version>3.1.0</version>
		<author>[29aleksey]</author>
		<link>---</link>

		<file path="catalog/controller/checkout/onepcheckout.php">
    		<operation>
    			<search><![CDATA[public function index() {]]></search>
    			<add position="after"><![CDATA[
    				/* START Shipping Data */
					$this->document->addStyle('catalog/view/theme/default/stylesheet/shippingdata.css');
					/* END Shipping Data */
        		]]></add>
    		</operation>
  		</file>

  		<file path="catalog/view/theme/*/template/checkout/onepcheckout.twig">
    		<operation>
    			<search><![CDATA[{{ footer }}]]></search>
    			<add position="before"><![CDATA[
					<!-- START Shipping Data -->
					<script type="text/javascript"><!--
						/* Autocomplete for shipping addresses */
						(function ($) {
							var methods = {
								init: function (options) {
									return this.each(function () {
										var $this = $(this);
										var data = $this.data('autocompleteAddress');

										/* If the plugin is not yet initialized */
										if (!data) {
											$this.timer = null;
											$this.items = new Array();

											$.extend($this, options);

											$this.attr('autocomplete', 'off');
											//$this.attr('autocomplete', 'new-password');

											/* Focus */
											$this.on('focus.autocompleteAddress', function () {
												$this.request('');
											} );

											/* Blur */
											$this.on('blur.autocompleteAddress', function () {
												setTimeout(function (object) {
													object.hide();
												}, 200, $this);
											} );

											/* Keydown */
											$this.on('keydown.autocompleteAddress', function (event) {
												switch (event.keyCode) {
													case 27: // escape
														$this.hide();
														break;
													default:
														$this.request();
														break;
												}
											} );

											/* Click */
											$this.click = function (event) {
												event.preventDefault();

												var value = $(event.target).parent().attr('data-value');

												if (value && $this.items[value]) {
													$this.select($this.items[value]);
												}
											}

											/* Show */
											$this.show = function () {
												var pos = $this.position();

												$this.siblings('ul.' + $this.class).css({
													'top': pos.top + $this.outerHeight(),
													'left': pos.left
												});

												$this.siblings('ul.' + $this.class).show();
											}

											/* Hide */
											$this.hide = function () {
												$this.siblings('ul.' + $this.class).hide();
											}

											/* Request */
											$this.request = function (search) {
												clearTimeout($this.timer);

												$this.timer = setTimeout(function (object) {
													search = (typeof(search) === 'undefined') ? object.val() : search;

													object.source(search, $.proxy(object.response, object));
												}, 200, $this);
											}

											/* Response */
											$this.response = function (json) {
												var html = '';

												if (json.length) {
													for (i = 0; i < json.length; i++) {
														this.items[json[i]['value']] = json[i];

														html += '<li data-value="' + json[i]['value'] + '"><a href="#">' + json[i]['label'] + '</a></li>';
													}
												}

												if (html && $this.is(':focus')) {
													$this.show();
												} else {
													$this.hide();
												}

												$this.siblings('ul.' + $this.class).html(html);
											}

											$this.after('<ul class="' + $this.class + '"></ul>');
											$this.siblings('ul.' + $this.class).delegate('a', 'click', $.proxy($this.click, $this));
											$this.data('autocompleteAddress', true);
										}
									} );
								},
								destroy: function () {
									return this.each(function () {
										var $this = $(this);

										$this.removeData('autocompleteAddress');

										$this.off('.autocompleteAddress');
									} );
								}
							};

							$.fn.autocompleteAddress = function (method) {
								if (methods[method]) {
									return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
								} else if (typeof (method) === 'object' || !method) {
									return methods.init.apply(this, arguments);
								} else {
									$.error('Method "' + method + '" does not exist for jQuery.autocompleteAddress');
								}
							}
						} )(window.jQuery);

						/* ShippingData object */
						function ShippingData() {
							var self = this;
							var src, method, lang, city;
							var address_1,city_selected,old_sel_city;

							self.methods_city = [
								'novaposhta.department',
								'novaposhta.doors',
								'novaposhta.poshtomat',
								'ukrposhta.express_department',
								'ukrposhta.standard_department',
								'ukrposhta.express_doors',
								'ukrposhta.standard_doors',
								'justin.department'
							];

							self.methods_department = [
								'novaposhta.department',
								'novaposhta.poshtomat',
								'ukrposhta.express_department',
								'ukrposhta.standard_department',
								'justin.department'
							];

							self.methods_address = [
								'novaposhta.doors'
							];

							self.setProp = function () {
								self.method = $('input[name="shipping_method"]:checked').val() || $('select[name="shipping_method"]').val();
								self.address_1 = $('select[data-type=select2][name*="address_1"]:visible').length;
								self.city_selected = $('[name*="city"]:visible').val();
								self.lang = $('html').attr('lang') || 'ru';
							}

							self.handlerChanges = function (name, value) {

								if ($.inArray(self.method, self.methods_city.concat(self.methods_department, self.methods_address)) != - 1) {
									self.address_1 = $('select[data-type=select2][name*="address_1"]:visible').length;
									self.old_sel_city = city_selected;
									self.city_selected = $('[name*="city"]:visible').val() || self.old_sel_city;

									if (name.match(/zone/i)) {
										$('input[name*="city"]:visible').val('');
										$('input[name*="address_1"]:visible, input[name*="address_2"]:visible, input[name*="street"]:visible').val('');

										/*opc*/
										$('select[data-type=select2][name*="city"]:visible option').filter(':not(:eq(0))').remove();
										$('select[data-type=select2][name*="address_1"]:visible option').filter(':not(:eq(0))').remove();
										/*end opc*/

									} else if (name.match(/city/i)) {
										$('input[name*="address_1"]:visible, input[name*="address_2"]:visible, input[name*="street"]:visible').val('');
										$('select[data-type=select2][name*="address_1"]:visible option').filter(':not(:eq(0))').remove();
										if (self.address_1 && $.inArray(self.method, self.methods_department) != - 1) {
											self.initSelect2Addres1();
										}
									} else if (name.match(/shipping\_method/i)) {
										$('input[name*="city"]:visible').val('').autocompleteAddress('destroy');
										$('input[name*="address_1"]:visible, input[name*="address_2"]:visible, input[name*="street"]:visible').val('').autocompleteAddress('destroy');

										self.method = value;
									}
								} else if ($.inArray(value, self.methods_city.concat(self.methods_department, self.methods_address)) != - 1) {
									if (name.match(/shipping\_method/i)) {
										$('input[name*="city"]:visible').val('');
										$('input[name*="address_1"]:visible, input[name*="address_2"]:visible, input[name*="street"]:visible').val('');

										self.method = value;
									}
								}
							}

							self.getAddress = function (element, search) {
								var filter, action;

								if (element[0].name.match(/city/i)) {
									action = 'getCities';
									filter = $('[name*="zone"]:visible').val() || '';
								} else if (element[0].name.match(/address_1/i)) {
									action = 'getDepartments';
									filter = $('[name*="city"]:visible').val();
								} else if (element[0].name.match(/address_2|street/i)) {
									action = 'getStreets';
									filter = self.city || $('[name*="city"]:visible').val();
								}

								if (!search) {
									search = element[0].value;
								}

								return $.ajax( {
									url: 'index.php?route=extension/module/shippingdata/getShippingData',
									type: 'POST',
									data: 'shipping=' + self.method + '&action=' + action + '&filter=' + encodeURIComponent(filter) + '&search=' + encodeURIComponent(search),
									dataType: 'json',
									global: false,
									success: function (json) {
										self.src = json;
									}
								} );
							}

							self.Select2Address =  function(element) {
								var filter, action;
								if (element[0].name.match(/city/i)) {
									action = 'getCities';
									filter = $('[name*="zone"]:visible').val() || '';
								} else if (element[0].name.match(/address_1/i)) {
									action = 'getDepartments';
									filter = $('[name*="city"]:visible').val();
								} else if (element[0].name.match(/address_2|street/i)) {
									action = 'getStreets';
									filter = self.city_selected || $('[name*="city"]:visible').val();
								}

								return $.ajax( {
									url: 'index.php?route=extension/module/shippingdata/getShippingData',
									type: 'POST',
									data: 'shipping=' + self.method + '&action=' + action + '&filter=' + encodeURIComponent(filter),
									dataType: 'json',
									global: false,
								});
							}

							self.initSelect2Cities = function() {
								var select2_cities = $('select[data-type=select2][name*="city"]:visible'),items;
								if(!select2_cities.length){
									if (self.address_1 && $.inArray(self.method, self.methods_department) != - 1) {
										self.initSelect2Addres1();
									}
								} else {
									$('select[data-type=select2][name*="city"]:visible option').filter(':not(:eq(0))').remove();
									if(select2_cities.length){
										self.Select2Address(select2_cities,).done(function (results) {
											items = $.map(results, function (item) {
												if(item['description'] == self.city_selected){
													return {
														id: item['description'],
														text: item['description'],
														selected:true,
													}
												} else {
													return {
														id: item['description'],
														text: item['description'],
													}
												}
											});
											select2_cities.select2({
												data: items,
												cache: false,
											});
										}).done(function() {
											$('select[data-type=select2][name*="address_1"]:visible option').filter(':not(:eq(0))').remove();
											if (self.address_1 && $.inArray(self.method, self.methods_department) != - 1) {
												self.initSelect2Addres1();
											}
										});
									}
								}
							}

							self.initSelect2Addres1 = function() {
								var select2_address_1 = $('select[data-type=select2][name*="address_1"]:visible'),items;
								$('select[data-type=select2][name*="address_1"]:visible option').filter(':not(:eq(0))').remove();
								self.Select2Address(select2_address_1).done(function (results) {
									items = $.map(results, function (item) {
										return {
											id: item['description'],
											text: item['description'],
										}
									});
									select2_address_1.select2({
										data: items,
										cache: false,
									});
								});
							}
						}

						/* DOOM loaded */
						$(function () {
							var shippingData = new ShippingData();

							/* Settings properties after DOOM load */
							shippingData.setProp();

							/* Settings properties after ajaxStop */
							$(document).ajaxStop(function () {
								shippingData.setProp();
							});

							/* Check changes */
							$(document).on('change', '[name*="zone"]:visible, [name*="city"]:visible, [name*="shipping_method"]', function (e) {
								shippingData.handlerChanges(e.target.name, e.target.value);
							});

							$(document).ajaxComplete(function( event, xhr, settings ) {
								if ( settings.url === "index.php?route=checkout/onepcheckout/reloadAll" ) {
									if(shippingData.method == 'novaposhta.doors'){
										//$('input[name*="city"]:visible').val('');
										//$('input[name*="address_1"]:visible, input[name*="address_2"]:visible, input[name*="street"]:visible').val('');
									}
									setTimeout(function() {
										shippingData.initSelect2Cities();
									}, 500);
								}
							});

							if ($.inArray(shippingData.method, shippingData.methods_city) != - 1) {
								if(shippingData.method == 'novaposhta.doors'){
									//$('input[name*="city"]:visible').val('');
									//$('input[name*="address_1"]:visible, input[name*="address_2"]:visible, input[name*="street"]:visible').val('');
								}
								shippingData.initSelect2Cities();
							}

							/* Add autocomplete for city */
							$('body').on('focus', 'input[name*="city"]:visible', function () {
								if (this.name.match(/city/i) && $.inArray(shippingData.method, shippingData.methods_city) != - 1) {
									$(this).autocompleteAddress({
										source: function (request, response) {
											shippingData.getAddress(this, request).done(function () {
												response($.map(shippingData.src, function (item) {
													return {
														id:    item['id'] || '',
														label: item['full_description'] || item['description'],
														value: item['description'],
													}
												}));
											});
										},
										select: function (e) {
											if (e.value != this.val()) {
												this.val(e.value);
												shippingData.city = e.id;
												this.addClass('focus');
												$('[data-type="select2"]#input-payment-address-1').removeClass('focus');
												this.trigger('change');
											}
										},
										class: 'dropdown-address'
									});
								}
							});

							/* Add autocomplete for department */
							$('body').on('focus', 'input[name*="address_1"]:visible', function () {
								if (this.name.match(/address_1/i) && $.inArray(shippingData.method, shippingData.methods_department) != - 1) {
									$(this).autocompleteAddress({
										source: function (request, response) {
											shippingData.getAddress(this, request).done(function () {
												response($.map(shippingData.src, function (item) {
													return {
														label: item['full_description'] || item['description'],
														value: item['description']
													}
												}));
											});
										},
										select: function (e) {
											if (e.value != this.val()) {
												this.val(e.value);
												this.trigger('change');
											}
										},
										class: 'dropdown-address'
									});
								}
							});

							/* Add autocomplete for address */
							$('body').on('focus', 'input[name*="address_2"]:visible, input[name*="street"]:visible', function () {
								if (this.name.match(/address_2|street/i) && $.inArray(shippingData.method, shippingData.methods_address) != - 1) {
									$(this).autocompleteAddress({
										source: function (request, response) {
											shippingData.getAddress(this, request).done(function () {
												response($.map(shippingData.src, function (item) {
													return {
														label: item['full_description'] || item['description'],
														value: item['description']
													}
												}));
											});
										},
										select: function (e) {
											if (e.value != this.val()) {
												this.val(e.value);

												this.trigger('change');
											}
										},
										class: 'dropdown-address'
									});
								}
							});
						});
					//--></script>
					<!-- END Shipping Data -->
        		]]></add>
    		</operation>
	</file>

	<file path="catalog/view/theme/*/template/checkout/onepcheckout_shipping_method.twig">
    		<operation>
    			<search><![CDATA[{% if quote['text'] is not empty %} - {{ quote['text'] }}{% endif %}]]></search>
    			<add position="after"><![CDATA[
    				<!-- START Shipping Data -->
					{% if quote.text_period %}
						<span>{{ quote.text_period }}</span>
					{% endif %}
					<!-- END Shipping Data -->
        		]]></add>
    		</operation>
	</file>

	</modification>
